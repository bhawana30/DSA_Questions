#include<bits/stdc++.h>
using namespace std;
#define n 9

void display(vector<vector<int>> &board)
{
	for(auto x:board)
	{
		for(auto y:x)
			cout<<y<<" ";

		cout<<endl;
	}
	cout<<endl;
}
bool isSafe(int row,int col,vector<vector<int>> &board,int value)
{
	

	for(int i=0;i<n;i++)
	{
		//row check

		if(board[row][i]==value)
			return false;
		//col check

		if(board[i][col]==value)
			return false;

		// 3*3 matrix check

		if(board[3*(row/3)+i/3][3*(col/3)+i%3]==value)
			return false;

	}
	return true;

}

bool solve(vector<vector<int>> &board)
{
	//cout<<row<<" "<<col<<endl;

	int row=-1;
	int col=-1;

	bool emptyleft=true;

	for(int i=0;i<n;i++)
	{
		for(int j=0;j<n;j++)
		{
			if(board[i][j]==0)
			{
				row=i;
				col=j;
				emptyleft=false;
				break;
			}

		}
		//
		//if you found some empty element in row then break
		if(emptyleft==false)
			break;
		//cout<<"hello"<<endl;
	}
	if(emptyleft==true)
		return true;//soduku is solved

	for(int num=1;num<=9;num++)
	{
		if(isSafe(row,col,board,num)==true)
		{
			board[row][col]=num;
			if(solve(board))
			{
				display(board);
				//found the answer
				return true;
			}
			else
			{
				//backtrack
				board[row][col]=0;
			}
		}
	}

	return false;
	
}

int main()
{
	// int n;
	// cin>>n;

	vector<vector<int>> board={ {3, 0, 6, 5, 0, 8, 4, 0, 0}, 
         {5, 2, 0, 0, 0, 0, 0, 0, 0}, 
         {0, 8, 7, 0, 0, 0, 0, 3, 1}, 
         {0, 0, 3, 0, 1, 0, 0, 8, 0}, 
         {9, 0, 0, 8, 6, 3, 0, 0, 5}, 
         {0, 5, 0, 0, 9, 0, 6, 0, 0}, 
         {1, 3, 0, 0, 0, 0, 2, 5, 0}, 
         {0, 0, 0, 0, 0, 0, 0, 7, 4}, 
         {0, 0, 5, 2, 0, 6, 3, 0, 0} };

         if(solve(board)==true)
             display(board);
         else
         	cout<<"NO solution exist"<<endl;
	// for(int i=0;i<n;i++)
	// {
	// 	for(int j=0;j<n;j++)
	// 	{
	// 		board[i][j]=0;
	// 	}
	// }
}
